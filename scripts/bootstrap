#!/bin/bash

set -e

if [[ -n "${OAR_DEBUG}" ]]; then
    set -x
fi

# fail without OAR_SETTINGS_BUCKET
set -u

DIR="$(dirname "${0}")/../"

function usage() {
    echo -n \
        "Usage: $(basename "$0")
Pull (from S3) .env files and import database dumps 
"
}

if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    if [ "${1:-}" = "--help" ]; then
        usage
    else
        pushd "${DIR}"

        echo "Pulling .env.backend from s3://${OAR_SETTINGS_BUCKET}"
        aws s3 cp "s3://${OAR_SETTINGS_BUCKET}/.env.backend" ".env.backend"

        echo "Pulling .env.frontend from s3://${OAR_SETTINGS_BUCKET}"
        aws s3 cp "s3://${OAR_SETTINGS_BUCKET}/.env.frontend" ".env.frontend"

        echo "Pulling database dumps from s3://${OAR_SETTINGS_BUCKET}"
        aws s3 cp "s3://${OAR_SETTINGS_BUCKET}/oar_mongodump_fixed.tar.gz" "/tmp/oar_mongodump_fixed.tar.gz"

        echo "Running mongorestore on database dumps"
        tar -zxvf /tmp/oar_mongodump_fixed.tar.gz -C /tmp/

        # Bring up MongoDB and ElasticSearch and respect healthchecks using the API service
        docker-compose up -d api
        docker-compose stop api

        # Run mongorestore on fixed database dumps
        docker-compose run --rm \
            --entrypoint mongorestore \
            -v /tmp/oar_mongodump_fixed/:/opt/oar_mongodump_fixed \
            mongo \
            --drop --uri=mongodb://mongo:27017/openapparelregistry /opt/oar_mongodump_fixed/ -vvvvv

        echo "Running Mongoosastic ElasticSearch synchronization"
        docker-compose run --rm \
            --entrypoint node \
            -v "$(pwd)/src/api/scripts:/usr/local/src/scripts" \
            api \
            scripts/synchronize.js

        docker-compose down

        popd
    fi
fi
